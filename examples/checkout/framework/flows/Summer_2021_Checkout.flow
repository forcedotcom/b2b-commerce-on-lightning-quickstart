<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>52.0</apiVersion>
    <assignments>
        <description>The loop node is here for cosmetic purposes. It helps make the flow easier to read, but is not a necessary technical component.</description>
        <name>Loop</name>
        <label>Loop</label>
        <locationX>1233</locationX>
        <locationY>977</locationY>
        <assignmentItems>
            <assignToReference>cartId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Refetch_Session_Subflow</targetReference>
        </connector>
    </assignments>
    <decisions>
        <description>The Main Decision Hub is the primary driver of the checkout flow.

It uses the following logic:
 - If mainCheckoutSession.IsProcessing = True, go to the wait screen.
 - Otherwise, for each session.state, go to the corresponding subflow.
 
Note: The nextState is passed into the subflow and the nextState value is set to mainCheckoutSession.state when: 
 - An asynchronous invocable action completes in an asynchronous subflow.
 - Or the Save Session node produces the nextState value for a synchronous subflow, and assigns it to the nextState variable in the main flow. 

Asynchronous invocable actions set mainCheckoutSession.isProcess = True.</description>
        <name>Main_Decision_Hub</name>
        <label>Main Decision Hub</label>
        <locationX>675</locationX>
        <locationY>375</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Error_Outcome</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.IsError</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Error_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Error</label>
        </rules>
        <rules>
            <name>Waiting_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.IsProcessing</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Wait_Debug_Decision</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Waiting</label>
        </rules>
        <rules>
            <name>Shipping_Address_Outcome</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Shipping Address</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Start</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Shipping_Address_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Shipping Address</label>
        </rules>
        <rules>
            <name>Delivery_Method_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Delivery Method</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Delivery_Method</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Delivery Method</label>
        </rules>
        <rules>
            <name>Checkout_Summary_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Checkout Summary</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Checkout_Summary_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Checkout Summary</label>
        </rules>
        <rules>
            <name>Order_Confirmation_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Order Confirmation</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Order_Confirmation_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Order Confirmation</label>
        </rules>
        <rules>
            <name>Cart_To_Order_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Cart To Order</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Cart_To_Order_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Cart To Order</label>
        </rules>
        <rules>
            <name>Payment_And_Billing_Address_Outcome</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Payment And Billing Address</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Payment_and_Billing_Address_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Payment And Billing Address</label>
        </rules>
        <rules>
            <name>Confirm_Price_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Confirm Price</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Confirm_Price_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Confirm Price</label>
        </rules>
        <rules>
            <name>Shipping_Cost_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Shipping Cost</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Shipping_Cost_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Shipping Cost</label>
        </rules>
        <rules>
            <name>Inventory_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Inventory</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Inventory_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Inventory</label>
        </rules>
        <rules>
            <name>Taxes_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Taxes</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Taxes_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Taxes</label>
        </rules>
        <rules>
            <name>Activate_Order_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>mainCheckoutSession.State</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Activate Order</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Activate_Order_Subflow</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Activate Order</label>
        </rules>
    </decisions>
    <decisions>
        <description>The Debug Screen Decision node determines whether to show the debug screen. The default is no.</description>
        <name>Debug_Screen_Decision</name>
        <label>Show Debug Screen?</label>
        <locationX>366</locationX>
        <locationY>169</locationY>
        <defaultConnector>
            <targetReference>Main_Decision_Hub</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Debug_Screen_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>debug</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Debug_Screen</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Debug Screen Outcome</label>
        </rules>
    </decisions>
    <decisions>
        <description>The Wait Debug Decision node determines whether to show the debug screen. The default is no.</description>
        <name>Wait_Debug_Decision</name>
        <label>Show Wait Debug?</label>
        <locationX>769</locationX>
        <locationY>270</locationY>
        <defaultConnector>
            <targetReference>Wait_Screen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Wait_Debug_Outcome</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>debug</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Wait_Debug_Screen</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
            <label>Wait Debug Outcome</label>
        </rules>
    </decisions>
    <description>B2B Commerce stores use the checkout flow to convert carts to activated orders. It supports asynchronous invocable actions that can be customized to call external systems. If async calls take too long, end users can close the page and resume the checkout later.</description>
    <interviewLabel>Checkout Flow {!$Flow.CurrentDateTime}</interviewLabel>
    <isTemplate>true</isTemplate>
    <label>(Summer 2021) Checkout Flow</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processType>CheckoutFlow</processType>
    <runInMode>SystemModeWithSharing</runInMode>
    <screens>
        <description>The Wait Debug Screen node displays a version of the wait screen with debug information.</description>
        <name>Wait_Debug_Screen</name>
        <label>Wait Debug</label>
        <locationX>1034</locationX>
        <locationY>323</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Refetch_Session_Subflow</targetReference>
        </connector>
        <fields>
            <name>WaitingLabel</name>
            <fieldText>&lt;p&gt;Waiting Screen ( replace with a subflow at some point )&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>lockDisplay</name>
            <fieldText>&lt;p&gt;Locked: {!mainCheckoutSession.IsProcessing}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>stateDisplay</name>
            <fieldText>&lt;p&gt;State: {!mainCheckoutSession.State}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>sessionNextState2</name>
            <fieldText>&lt;p&gt;Next State: {!mainCheckoutSession.NextState}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>jobIdDislpay</name>
            <fieldText>&lt;p&gt;Job: {!mainCheckoutSession.Id}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>commerceScreenWait</name>
            <extensionName>forceCommunity:commerceScreenWait</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>cartCheckoutSessionId</name>
                <value>
                    <elementReference>mainCheckoutSession.Id</elementReference>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <outputParameters>
                <assignToReference>mainCheckoutSession.Id</assignToReference>
                <name>cartCheckoutSessionId</name>
            </outputParameters>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>Debug_Screen</name>
        <label>Debug</label>
        <locationX>374</locationX>
        <locationY>380</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Main_Decision_Hub</targetReference>
        </connector>
        <fields>
            <name>CheckoutSessionIdText</name>
            <fieldText>&lt;p&gt;Session Id: {!mainCheckoutSession.Id}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>currentstate</name>
            <fieldText>&lt;p&gt;State: {!mainCheckoutSession.State}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>sessionNextState</name>
            <fieldText>&lt;p&gt;Next State: {!mainCheckoutSession.NextState}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>jobIdDisplaydsaf</name>
            <fieldText>&lt;p&gt;JobId: {!mainCheckoutSession.Id}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>locked</name>
            <fieldText>&lt;p&gt;Locked? {!mainCheckoutSession.IsProcessing}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>order</name>
            <fieldText>&lt;p&gt;Order: {!mainCheckoutSession.OrderId}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>shouldCloseCartBool</name>
            <fieldText>&lt;p&gt;Should Close Cart? {!shouldCloseCart}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <description>The Wait Screen node displays when session.isProcessing = true

Async subflows set session.isProcessing = true before calling async invocable actions.

When async invocable actions complete, they change session.isProcessing to false and set session.state to session.nextState, not the flow variable nextState.  </description>
        <name>Wait_Screen</name>
        <label>Wait</label>
        <locationX>1034</locationX>
        <locationY>205</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Refetch_Session_Subflow</targetReference>
        </connector>
        <fields>
            <name>commerceScreenWait_0</name>
            <extensionName>forceCommunity:commerceScreenWait</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>cartCheckoutSessionId</name>
                <value>
                    <elementReference>mainCheckoutSession.Id</elementReference>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <outputParameters>
                <assignToReference>mainCheckoutSession.Id</assignToReference>
                <name>cartCheckoutSessionId</name>
            </outputParameters>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <start>
        <locationX>121</locationX>
        <locationY>21</locationY>
        <connector>
            <targetReference>Get_Or_Create_Session_Subflow</targetReference>
        </connector>
        <doesRequireRecordChangedToMeetCriteria>false</doesRequireRecordChangedToMeetCriteria>
    </start>
    <status>Active</status>
    <subflows>
        <description>Calls the cartToOrderAction invocable action to convert a cart to a draft order.</description>
        <name>Cart_To_Order_Subflow</name>
        <label>Cart To Order</label>
        <locationX>892</locationX>
        <locationY>1342</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Cart_To_Order</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Payment And Billing Address</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>The Get or Create Session node retrieves or creates the CartCheckoutSession for a given cart ID. There is only one valid session for a cart at a time. The most likely scenarios are Session.isArchived=false and Session.state is not Error or Completed.</description>
        <name>Get_Or_Create_Session_Subflow</name>
        <label>Get Or Create Session</label>
        <locationX>247</locationX>
        <locationY>167</locationY>
        <connector>
            <targetReference>Debug_Screen_Decision</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Checkout_Session</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <outputAssignments>
            <assignToReference>mainCheckoutSession</assignToReference>
            <name>checkoutSession</name>
        </outputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Calls the priceCart invocable action to confirm item pricing in the cart, perform complex pricing logic, and integrate with external pricing services.</description>
        <name>Confirm_Price_Subflow</name>
        <label>Confirm Price</label>
        <locationX>476</locationX>
        <locationY>1075</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Confirm_Price</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Shipping Cost</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Display the shipping address selection screen.</description>
        <name>Shipping_Address_Subflow</name>
        <label>Shipping Address</label>
        <locationX>298</locationX>
        <locationY>959</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Shipping_Address</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Inventory</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Display the checkout summary screen before placing the order.</description>
        <name>Checkout_Summary_Subflow</name>
        <label>Checkout Summary</label>
        <locationX>805</locationX>
        <locationY>1273</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Checkout_Summary</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Cart To Order</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>The Redirect Order Confirmation node finishes the checkout process, closes the cart, and redirects the user to the order confirmation page in your B2B store.</description>
        <name>Order_Confirmation_Subflow</name>
        <label>Order Confirmation</label>
        <locationX>1171</locationX>
        <locationY>1515</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Order_Confirmation</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <stringValue>Order Confirmation</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>mainCheckoutSession</name>
            <value>
                <elementReference>mainCheckoutSession</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Complete</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>shouldArchiveCheckoutAndCloseCart</name>
            <value>
                <elementReference>shouldCloseCart</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Calls the calcCartShipmentAction invocable action to calculate shipping costs. You can integrate with an external shipment vendor using Apex.</description>
        <name>Shipping_Cost_Subflow</name>
        <label>Shipping Cost</label>
        <locationX>565</locationX>
        <locationY>1108</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Shipping_Cost</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Delivery Method</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Calls the calcCartTaxesAction invocable action to calculate taxes. You can integrate with external tax services using Apex.</description>
        <name>Taxes_Subflow</name>
        <label>Taxes</label>
        <locationX>728</locationX>
        <locationY>1231</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Taxes</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Checkout Summary</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Calls the checkCartInventoryAction invocable action to check inventory. You  can apply custom business logic using Apex.</description>
        <name>Inventory_Subflow</name>
        <label>Inventory</label>
        <locationX>393</locationX>
        <locationY>1020</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Inventory</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSessionId</name>
            <value>
                <elementReference>mainCheckoutSession.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Confirm Price</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Calls the activateOrder synchronous invocable action to convert an order from Draft to Activated state.</description>
        <name>Activate_Order_Subflow</name>
        <label>Activate Order</label>
        <locationX>1086</locationX>
        <locationY>1447</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Activate_Order</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>checkoutSession</name>
            <value>
                <elementReference>mainCheckoutSession</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Order Confirmation</stringValue>
            </value>
        </inputAssignments>
        <outputAssignments>
            <assignToReference>shouldCloseCart</assignToReference>
            <name>closeCart</name>
        </outputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>The Refetch Session node retrieves the current checkout session without creating a new one.</description>
        <name>Refetch_Session_Subflow</name>
        <label>Refetch Session</label>
        <locationX>1233</locationX>
        <locationY>172</locationY>
        <connector>
            <targetReference>Debug_Screen_Decision</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Checkout_Session</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <outputAssignments>
            <assignToReference>mainCheckoutSession</assignToReference>
            <name>checkoutSession</name>
        </outputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>Shows the error message from the CartValidationOutput</description>
        <name>Error_Subflow</name>
        <label>Error</label>
        <locationX>807</locationX>
        <locationY>617</locationY>
        <flowName>Summer_2021_Subflow_Error</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description>This is the Payment and Billing Address subflow. Pick a payment method between credit card and purchase order. Enter details, authorize and proceed to order confirmation.</description>
        <name>Payment_and_Billing_Address_Subflow</name>
        <label>Payment and Billing Address</label>
        <locationX>987</locationX>
        <locationY>1382</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Payment_Billing_Address</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Activate Order</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>orderId</name>
            <value>
                <elementReference>mainCheckoutSession.OrderId</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>false</storeOutputAutomatically>
    </subflows>
    <subflows>
        <description></description>
        <name>Delivery_Method</name>
        <label>Delivery Method</label>
        <locationX>642</locationX>
        <locationY>1173</locationY>
        <connector>
            <targetReference>Loop</targetReference>
        </connector>
        <flowName>Summer_2021_Subflow_Delivery_Method</flowName>
        <inputAssignments>
            <name>cartId</name>
            <value>
                <elementReference>cartId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>currentState</name>
            <value>
                <elementReference>mainCheckoutSession.State</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>nextState</name>
            <value>
                <stringValue>Taxes</stringValue>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <variables>
        <name>cartId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>mainCheckoutSession</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>CartCheckoutSession</objectType>
    </variables>
    <variables>
        <name>debug</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <name>orderId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>jobId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>shouldCloseCart</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
</Flow>
